{
  "name": "struct",
  "version": "0.0.8",
  "description": "Pack/Unpack multibyte binary values from/to buffers ",
  "author": {
    "name": "Denys Khanzhiyev"
  },
  "main": "./index.js",
  "maintainers": [
    {
      "name": "xdenser",
      "email": "xdenser@gmail.com"
    }
  ],
  "bugs": {
    "url": "http://github.com/xdenser/node-struct/issues"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "dependencies": {},
  "repositories": [
    {
      "type": "git",
      "url": "git+ssh://git@github.com/xdenser/node-struct.git"
    }
  ],
  "engines": {
    "node": ">0.6.0"
  },
  "gitHead": "07a437f41dd0ea7a66d76df744b384277d8e705b",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/xdenser/node-struct.git"
  },
  "homepage": "https://github.com/xdenser/node-struct",
  "_id": "struct@0.0.8",
  "scripts": {},
  "_shasum": "53f11e6d366014773eec52fb7fbab4d953d27019",
  "_from": "git+https://github.com/saturn4er/node-struct.git",
  "_npmVersion": "1.4.14",
  "_npmUser": {
    "name": "xdenser",
    "email": "xdenser@gmail.com"
  },
  "dist": {
    "shasum": "fb65bf5084320e26ec3d59d7dc41f0181ccea287",
    "tarball": "http://registry.npmjs.org/struct/-/struct-0.0.8.tgz"
  },
  "directories": {},
  "_resolved": "git+https://github.com/saturn4er/node-struct.git#a01e7ee55b75177da61de57e5e75228326c71ff3",
  "readme": "Struct\r\n======\r\nNodeJS module to work with buffers as structures (or records) of various fields (like c struct declaration, or pascal record).\r\n\r\nInstallation\r\n============\r\n\r\nTo install with [npm](http://github.com/isaacs/npm):\r\n \r\n    npm install struct\r\n    \r\n\r\nExample\r\n=======\r\n\r\nDefine some structure: \r\n\r\n\tvar Struct = require('struct');\r\n \r\n\tvar Person = Struct()\r\n\t\t.chars('firstName',10)\r\n\t\t.chars('lastName',10)\r\n\t\t.array('items',3,'chars',10)\r\n\t\t.word16Sle('balance'),\r\n\tPeople = Struct()\r\n\t\t.word8('presentCount')\r\n\t\t.array('list',2,Person);\r\n\t\t\r\nNow allocate buffer for it\r\n\t\r\n\tPeople.allocate();\r\n\tvar buf = People.buffer();\r\n\t\r\nClear buffer to see how it will change later:\r\n\t\r\n\tvar buf = Persons.buffer();\r\n\tfor (var i = 0; i < buf.length ; i++) {\r\n  \t\tbuf[i] = 0;\r\n\t}\r\n\tconsole.log(buf);\r\n\t\r\nOutput:\r\n\t<Buffer 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00>\r\n\t\r\n\t\r\nNow you can access memory as defined binary structure with `fields` property in a handy manner.\t\t\r\n\r\n\tvar proxy = People.fields;\r\n\tproxy.presentCount = 2;\r\n\tconsole.log(buf);\r\n\t\r\nOutput: \r\n\t\r\n\t<Buffer 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00>\r\n\t\r\nAnd so on\r\n\r\n\tproxy.list[0].firstName = 'John';\r\n\tconsole.log(buf);\r\n\t\r\nOutput:\r\n\t<Buffer 02 4a 6f 68 6e 00 00 00 00 00 00 ...\t\r\n\t     \r\nReference\r\n=========\r\n\r\n##Struct()\r\n\r\ncreates struct object, you may define your data structure with chain calls to following methods:\r\n\r\n###word8(name)\r\ndefines one byte unsigned field, name - always defines name of field\r\n\r\n### word8Sle(name),word8Sbe(name)\r\ndefine one byte signed field\r\n\r\n### word16Sle(name),word16Sbe(name)\r\ndefine 16 bit signed field with little-endian and big-endian byte order\r\n\r\n### word16Ule(name),word16Ube(name)\r\ndefine 16 bit unsigned field with little-endian and big-endian byte order\r\n\r\n### word32Sle(name),word32Sbe(name),word32Ule(name),word32Ube(name),word64Sle(name),word64Sbe(name),word64Ule(name),word64Ube(name)\r\nsame for 32 and 64 bit fields\r\n\r\n### chars(name,length[,encoding])\r\ndefines array of chars with `encoding` ('ascii' by default) encoding, name - name of the field, length - length of array\r\n\r\n### array(name, length, type, ...)\r\ndefines array of fields (internally it is Struct() object with field names set to 0,1,2,... ).\r\n \r\n- `name` - name of array field;\r\n- `length` - length of array;\r\n- `type` - `string||Struct()`, string is interpreted as name of Struct()  method to call for each array element.\r\n\r\nFor example `array('numbers',5,'word16Ule')` will define array of 2 byte unsigned words (x86 byte order) with 5 elements.\r\nAny parameters that follow type will be passed to definition function. \r\nSo `array('someName',3,'chars',20)` defines 3 element array of 20 chars.\r\nYou also may pass Struct() object to make array of structures.\r\n\r\n### struct(name, Struct() )   \r\n      \r\ndefines field that itself is a structure.\r\n\r\n## Other methods\r\n\r\n### get(fieldName)\r\nallows access to field (reads value from it's offset in buffer)\r\n\r\n### set(fieldName, value)\r\nallows access to field (write value at it's offset in buffer)\r\n\r\n### allocate()\r\nallocates buffer for defined structure with proper size. This is used when you need to format data in buffer and send or write it out.\r\n \r\n### _setBuff(buffer)\r\nsets buffer reference of object to other buffer. This may be used to parse or adjust some binary data received or read from somewhere.\r\n\r\n### buffer()\r\nreturns currently used buffer. Before you may read or write to structure you have to call either allocate() or _setBuff(buffer). \r\nThis is not true only for Struct() objects that are fields themselves, as they are allocated automatically by parent Struct object.\r\n\r\n## fields property\r\nStruct().fields is a Proxy object allowing to access structure fields in a handy manner - as any other javascript object.\r\n \r\n\r\n  \r\n",
  "readmeFilename": "README.md"
}
